import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Spinner from '../../components/spinner';
import { Link } from 'react-router-dom';
import { AiOutlineEdit } from 'react-icons/ai';
import { BsInfoCircle } from 'react-icons/bs';
import { MdOutlineAddBox, MdOutlineDelete } from 'react-icons/md';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import logo from '../../components/images/logo.png';
import Header from '../../components/headerfooter/Header';
import Footer from '../../components/headerfooter/Footer';


const DeliveryDashboard = () => {
  const [deliverys, setDeliverys] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredDeliverys, setFilteredDeliverys] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setLoading(true);
    axios
      .get('http://localhost:5555/deliverys')
      .then((response) => {
        setDeliverys(response.data.data);
        setFilteredDeliverys(response.data.data); // Initialize with all orders
        setLoading(false);
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
      });
  }, []);

  const handleSearchInputChange = (e) => {
    setSearchQuery(e.target.value);
    const results = deliverys.filter((delivery) =>
      delivery.Address.toLowerCase().includes(e.target.value.toLowerCase()) ||
      delivery.SenderName.toLowerCase().includes(e.target.value.toLowerCase())
    );
    setFilteredDeliverys(results);
  };
  

  // Generate PDF report
  const generatePDF = () => {
    const doc = new jsPDF();

    
    // Add Business Name
    doc.setFontSize(24);
    doc.setFont('Poppins', 'bold');
    doc.text('CraftMart', 14, 22);

     // Add the logo image
     const logoWidth = 45; // Adjust width as needed
     const logoHeight = 30; // Adjust height as needed
     doc.addImage(logo, 'PNG', 160, 10, logoWidth, logoHeight); // Add logo to the right side
 
 

    // Add report title
    doc.setFontSize(18);
    doc.setFont('Poppins', 'bold');
    doc.text('Delivery Report', 14, 32);

    // Add report generation date
    const reportDate = new Date().toLocaleDateString();
    doc.setFontSize(12);
    doc.setFont('Poppins', 'normal');
    doc.text(`Date: ${reportDate}`, 14, 42);

    // Add a line break before the table
    doc.setDrawColor(0, 0, 0);
    doc.setLineWidth(1);
    doc.line(10, 45, 205, 45);

    // Table Column and Rows
    const tableColumn = ["No", "Address", "Postal Code", "Sender Name", "Contact Number"];
    const tableRows = filteredDeliverys.map((delivery, index) => [
      `DID_${index + 1}`,
      delivery.Address,
      delivery.PostalCode,
      delivery.SenderName,
      delivery.ContactNumber
    ]);

    // Generate Table
    doc.autoTable(tableColumn, tableRows, {
      startY: 50,
      theme: 'grid',
      headStyles: {
        fillColor: '#330D0F',
        textColor: '#FFFFFF',
        font: 'Poppins',
        fontSize: 8,
        halign: 'center',
      },
      bodyStyles: {
        font: 'Poppins',
        fontSize: 10,
      },
      margin: { left: 10, right: 14 },
      columnStyles: {
        0: { cellWidth: 15, halign: 'center' },
        1: { cellWidth: 50, halign: 'center' },
        2: { cellWidth: 25, halign: 'center' },
        3: { cellWidth: 40, halign: 'left' },
        4: { cellWidth: 30, halign: 'center' },
        5: { cellWidth: 25, halign: 'right' },
      },
      styles: {
        cellPadding: 2,
      },
      didDrawPage: function (data) {
        // Add footer text
        doc.setFontSize(10);
        doc.text('Generated by CraftMart', 14, doc.internal.pageSize.height - 10);
      },
    });

    doc.save('delivery-report.pdf');
  };

  return (
    <div>
      <Header />
    <div style={styles.page}>
      <div style={styles.container}>
        <div style={styles.header}>
          <h1 style={styles.title}>Shipping and Delivery Management </h1>
          <Link to='/deliverys/create'>
            <MdOutlineAddBox style={{ ...styles.addIcon, color: '#0284c7' }} />
          </Link>
        </div>

        <div style={styles.searchContainer}>
        <input
  type="text"
  placeholder="Search by Address or Sender Name"
  value={searchQuery}
  onChange={handleSearchInputChange}
  style={styles.searchInput}
/>

        </div>

        {loading ? (
          <Spinner />
        ) : (
          <>
            {filteredDeliverys.length > 0 ? (
              <>
                <button
                  onClick={generatePDF}
                  style={{ ...styles.downloadButton, ...styles.downloadButtonHover }}
                >
                  Download Shipping and Delivery Report
                </button>
                <table style={styles.table}>
                  <thead>
                    <tr>
                      <th style={{ ...styles.th, ...styles.columnWidths.no }}>Delivery ID</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.address }}>Address</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.postalCode }}>Postal Code</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.senderName }}>Sender Name</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.contactNumber }}>Contact Number</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.operations, ...styles.thLast }}>Operations</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredDeliverys.map((delivery, index) => (
                      <tr key={delivery._id} style={{ height: '2rem' }}>
                        <td style={{ ...styles.td, ...styles.columnWidths.no }}>DID_{index + 1}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.address }}>{delivery.Address}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.postalCode }}>{delivery.PostalCode}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.senderName }}>{delivery.SenderName}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.contactNumber }}>{delivery.ContactNumber}</td>
                        <td style={styles.td}>
                          <div style={styles.operations}>
                            <Link to={`/deliverys/details/${delivery._id}`}>
                              <BsInfoCircle style={{ ...styles.icon, color: '#047857' }} />
                            </Link>
                            <Link to={`/deliverys/edit/${delivery._id}`}>
                              <AiOutlineEdit style={{ ...styles.icon, color: '#d97706' }} />
                            </Link>
                            <Link to={`/deliverys/delete/${delivery._id}`}>
                              <MdOutlineDelete style={{ ...styles.icon, color: '#dc2626' }} />
                            </Link>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </>
            ) : (
              <p style={{ textAlign: 'center', fontSize: '1.25rem', color: '#330D0F', marginTop: '2rem' }}>No deliverys found.</p>
            )}
          </>
        )}
      </div>
    </div>
    <Footer />
    </div>
  );
};


// CSS styles
const styles = {
  page: {
    backgroundColor: '#fff',
    minHeight: '100vh',
    display: 'flex',
    justifyContent: 'flex-start',
    alignItems: 'flex-start',
    padding: '1rem',
    fontFamily: 'Poppins, sans-serif',
  },
  container: {
    width: '100%',
    maxWidth: '1200px',
    margin: '0 auto',
    fontFamily: 'Poppins, sans-serif',
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    fontFamily: 'Poppins, sans-serif',
    color: '#330D0F', 
    fontWeight: 'bold',
  },
  title: {
    fontSize: '1.875rem',
    margin: '2rem 0',
    fontFamily: 'Poppins, sans-serif',
  },
  downloadButton: {
    marginBottom: '10px',
    backgroundColor: '#330D0F',
    borderColor: '#330D0F',
    color: '#F1EEDA', // Text color
    padding: '0.5rem 1rem',
    fontSize: '0.88rem',
    fontWeight: 'bold',
    borderRadius: '0.25rem',
    cursor: 'pointer',
    border: '2px solid #330D0F',
    fontFamily: 'Poppins, sans-serif',
    transition: 'background-color 0.3s, border-color 0.3s',
  },
  downloadButtonHover: {
    backgroundColor: '#4a1a1b', // Darker shade for hover
    borderColor: '#4a1a1b',
  },
  addIcon: {
    fontSize: '2rem',
    fontFamily: 'Poppins, sans-serif',
  },
  searchContainer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    marginBottom: '1rem',
  },
  searchInput: {
    width: '300px',
    padding: '0.5rem',
    fontSize: '0.8rem',
    borderRadius: '0.25rem',
    border: '3px solid #330D0F',
    fontFamily: 'Poppins, sans-serif',
  },
  searchButton: {
    marginLeft: '0.5rem',
    padding: '0.5rem 1rem',
    fontSize: '0.88rem',
    fontWeight: 'bold',
    color: '#FFFFFF',
    backgroundColor: '#330D0F',
    border: '2px solid #330D0F',
    borderRadius: '0.25rem',
    cursor: 'pointer',
    fontFamily: 'Poppins, sans-serif',
  },
  table: {
    width: '100%',
    borderSpacing: '0.5rem',
    fontFamily: 'Poppins, sans-serif',
    tableLayout: 'fixed', // Ensures columns are fixed in width
  },
  th: {
    borderTop: '3px solid #330D0F',
    borderBottom: '3px solid #330D0F',
    borderLeft: '3px solid #330D0F',
    borderRight: '3px solid #F1EEDA',
    backgroundColor: '#4A1416',
    color: '#FFFFFF',
    height: '3rem',
    fontFamily: 'Poppins, sans-serif',
    overflow: 'hidden', // Hide overflow
    whiteSpace: 'nowrap', // Prevent text from wrapping
    textOverflow: 'ellipsis', // Add ellipsis if content is too long
  },
  columnWidths: {
    no: { width: '8%' },
    invoiceID: { width: '17%' },
    customer: { width: '15%' },
    productName: { width: '10%' },
    price: { width: '10%' },
    quantity: { width: '7%' },
    totalPrice: { width: '8%' },
    operations: { width: '10%' },
  },
  thLast: {
    borderRight: '3px solid #330D0F',
    fontFamily: 'Poppins, sans-serif',
  },
  td: {
    border: '3px solid #330D0F',
    height: '2.8rem',
    textAlign: 'center',
    fontFamily: 'Poppins, sans-serif',
    wordWrap: 'break-word', // Break long words to fit within the cell
    overflow: 'hidden', // Hide overflow
    textOverflow: 'ellipsis', // Add ellipsis if content is too long
  },
  operations: {
    display: 'flex',
    justifyContent: 'center',
    gap: '1rem',
    fontFamily: 'Poppins, sans-serif',
  },
  icon: {
    fontSize: '1.5rem',
    fontFamily: 'Poppins, sans-serif',
  },
};
  


export default DeliveryDashboard;
